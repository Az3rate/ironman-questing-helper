

// ===== FILE: src\main\java\com\devaz\ironmanquesting\IronmanQuestingConfig.java =====

// File: src/main/java/com/devaz/ironmanquesting/IronmanQuestingConfig.java
// Description: Config interface for RuneLite integration, with a sample toggle.
// ‚ö†Ô∏è Required by provideConfig() in IronmanQuestingPlugin. Expandable for future settings.

package com.devaz.ironmanquesting;

import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;

@ConfigGroup("ironmanquesting")
public interface IronmanQuestingConfig extends Config
{
    @ConfigItem(
        keyName = "showSteps",
        name = "Show Quest Steps",
        description = "Toggle the Ironman questing steps overlay"
    )
    default boolean showSteps()
    {
        return true;
    }
}


// ===== FILE: src\main\java\com\devaz\ironmanquesting\IronmanQuestingOverlay.java =====

// File: src/main/java/com/devaz/ironmanquesting/IronmanQuestingOverlay.java
// Description: Overlay that renders quest steps from quest_steps.json.
// ‚ö†Ô∏è Depends on IronmanQuestingPlugin, loads from resource path `/quest_steps.json`.
// ‚ö†Ô∏è quest_steps.json must be structured with a top-level object and "steps" array.

package com.devaz.ironmanquesting;

import com.google.gson.Gson;
import com.google.gson.annotations.SerializedName;
import net.runelite.api.Client;
import net.runelite.client.ui.overlay.Overlay;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.OverlayPriority;
import net.runelite.client.ui.overlay.components.LineComponent;
import net.runelite.client.ui.overlay.components.PanelComponent;

import javax.inject.Inject;
import java.awt.*;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;

public class IronmanQuestingOverlay extends Overlay
{
    private final Client client;
    private final PanelComponent panelComponent = new PanelComponent();
    private final List<QuestStep> steps = new ArrayList<>();

    @Inject
    public IronmanQuestingOverlay(Client client)
    {
        this.client = client;
        setPosition(OverlayPosition.TOP_LEFT);
        setPriority(OverlayPriority.HIGH);
        loadSteps();
    }

    @Override
    public Dimension render(Graphics2D graphics)
    {
        panelComponent.getChildren().clear();
        panelComponent.getChildren().add(LineComponent.builder()
            .left("Ironman Questing Steps")
            .build());

        for (int i = 0; i < steps.size(); i++)
        {
            QuestStep step = steps.get(i);
            panelComponent.getChildren().add(LineComponent.builder()
                .left((i + 1) + ". " + step.description)
                .right(step.done ? "‚úîÔ∏è" : "‚è≥")
                .build());
        }

        return panelComponent.render(graphics);
    }

    private void loadSteps()
    {
        try (InputStreamReader reader = new InputStreamReader(
            getClass().getResourceAsStream("/quest_steps.json")))
        {
            QuestData questData = new Gson().fromJson(reader, QuestData.class);
            if (questData != null && questData.steps != null)
            {
                steps.clear();
                steps.addAll(questData.steps);
            }
        }
        catch (Exception e)
        {
            System.err.println("[IronmanQuestingOverlay] Failed to load quest_steps.json: " + e.getMessage());
        }
    }

    public Client getClient()
    {
        return client;
    }

    private static class QuestData
    {
        @SerializedName("steps")
        List<QuestStep> steps;
    }

    private static class QuestStep
    {
        int id;
        String description;
        boolean done;
    }
}


// ===== FILE: src\main\java\com\devaz\ironmanquesting\IronmanQuestingPlugin.java =====

// File: src/main/java/com/devaz/ironmanquesting/IronmanQuestingPlugin.java
// Description: Main plugin class. Registers overlay on start and removes on shutdown.
// ‚ö†Ô∏è Depends on IronmanQuestingOverlay and IronmanQuestingConfig.

package com.devaz.ironmanquesting;

import com.google.inject.Provides;
import javax.inject.Inject;
import net.runelite.api.Client;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;

@PluginDescriptor(
    name = "Ironman Questing Helper"
)
public class IronmanQuestingPlugin extends Plugin
{
    @Inject
    private OverlayManager overlayManager;

    @Inject
    private IronmanQuestingOverlay overlay;

    @Inject
    private Client client;

    @Override
    protected void startUp()
    {
        System.out.println("[IronmanQuestingPlugin] üîß Ironman Questing Helper started");
        overlayManager.add(overlay);
    }

    @Override
    protected void shutDown()
    {
        overlayManager.remove(overlay);
        System.out.println("[IronmanQuestingPlugin] ‚ùå Ironman Questing Helper stopped");
    }

    @Provides
    IronmanQuestingConfig provideConfig(ConfigManager configManager)
    {
        return configManager.getConfig(IronmanQuestingConfig.class);
    }
}


// ===== FILE: src\test\java\com\devaz\ironmanquesting\IronmanQuestingPluginTest.java =====

package com.devaz.ironmanquesting;

import net.runelite.api.Client;
import net.runelite.client.ui.overlay.OverlayManager;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;

import java.lang.reflect.Field;

public class IronmanQuestingPluginTest
{
    @Test
    public void testPluginStartup() throws Exception
    {
        IronmanQuestingPlugin plugin = new IronmanQuestingPlugin();

        // Mock required dependencies
        Client mockClient = Mockito.mock(Client.class);
        OverlayManager mockOverlayManager = Mockito.mock(OverlayManager.class);
        IronmanQuestingOverlay mockOverlay = new IronmanQuestingOverlay(mockClient);

        // Inject mocks into private fields using reflection
        setPrivateField(plugin, "client", mockClient);
        setPrivateField(plugin, "overlayManager", mockOverlayManager);
        setPrivateField(plugin, "overlay", mockOverlay);

        // Run test logic
        plugin.startUp();

        System.out.println("‚úÖ Plugin startup completed successfully");
    }

    private void setPrivateField(Object target, String fieldName, Object value) throws Exception
    {
        Field field = target.getClass().getDeclaredField(fieldName);
        field.setAccessible(true);
        field.set(target, value);
    }
}


// ===== FILE: src\main\java\resources\steps.json =====

{
    "_meta": {
      "description": "Quest step tracking structure. Displayed by overlay.",
      "note": "‚ö†Ô∏è Loaded dynamically by IronmanQuestingOverlay. Do not remove."
    },
    "steps": [
      {
        "id": 1,
        "description": "Start as a female character, don't forget to make yourself an ironman before leaving tutorial island.",
        "done": false
      },
      {
        "id": 2,
        "description": "Use every book and lamp on Herblore UNTIL 77 herblore...",
        "done": false
      },
      {
        "id": 3,
        "description": "Use Authenticator AND 2-step verification on registered e-mail.",
        "done": false
      },
      {
        "id": 4,
        "description": "Sell bronze dagger, sword, axe, wooden shield and shortbow to the general store",
        "done": false
      },
      {
        "id": 5,
        "description": "Buy a spade, start X marks the spot quest",
        "done": false
      },
      {
        "id": 6,
        "description": "Drop your runes and ask for more from the magic tutor, pick up your runes",
        "done": false
      },
      {
        "id": 7,
        "description": "Pick up every item spawn in the castle, including the ones in cellar, don't forget the cabbage",
        "done": false
      },
      {
        "id": 8,
        "description": "Fill a jug with water",
        "done": false
      },
      {
        "id": 9,
        "description": "Talk to the duke to start Rune mysteries quest",
        "done": false
      },
      {
        "id": 10,
        "description": "Go to the top of the castle, bank everything",
        "done": false
      }
    ]
  }
  


// ===== FILE: pluginhub.manifest.json =====

{
    "internalName": "ironmanquesting",
    "displayName": "Ironman Questing Helper",
    "description": "A plugin that helps new Ironman accounts complete quests efficiently",
    "tags": ["ironman", "quest", "helper"],
    "category": "Utility",
    "creator": "Dev_Az",
    "version": "0.1"
  }
  


// ===== FILE: build.gradle.kts =====

plugins {
    id("java")
    id("com.github.johnrengelman.shadow") version "7.1.2"
}

group = "com.az"
version = "1.0"

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        name = "runelite-repo"
        url = uri("https://repo.runelite.net")
    }
}

dependencies {
    compileOnly("net.runelite:client:1.11.7-SNAPSHOT")
    testImplementation("net.runelite:client:1.11.7-SNAPSHOT")

    // ‚úÖ JUnit 5
    testImplementation("org.junit.jupiter:junit-jupiter-api:5.10.0")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:5.10.0")

    // ‚úÖ Mockito
    testImplementation("org.mockito:mockito-core:5.11.0")
}


tasks {
    jar {
        manifest {
            attributes["Main-Class"] = "com.devaz.ironmanquesting.IronmanQuestingPlugin"
        }
    }

    // ‚úÖ Ensure tests run using JUnit 5
    test {
        useJUnitPlatform()
    }
}

tasks {
    jar {
        manifest {
            attributes["Main-Class"] = "com.yourname.ironmanquesting.IronmanQuestingPlugin"
        }
    }
}


// ===== FILE: settings.gradle.kts =====

rootProject.name = "ironman-questing-helper"


// ===== FILE: README.md =====

# üõ°Ô∏è Ironman Questing Helper

A RuneLite plugin to guide Ironman accounts through the **most optimal progression route**, pulling strategies from multiple expert sources ‚Äî not just the OSRS Wiki.

This is not a general-purpose Quest Helper ‚Äî it‚Äôs focused on **early account optimization** for Ironman accounts, ensuring no crucial steps are missed.

---

## üöÄ Features

- üìã Step-by-step quest and skilling checklist for new Ironman accounts
- üß≠ Overlay displays progression steps live in-game
- ‚úÖ Loads data from `quest_steps.json` in `/resources`
- üîÅ Easily extensible structure for future dynamic tracking
- üõ†Ô∏è No backend or server dependency

---

## üìÅ File Structure

| File | Purpose |
|------|---------|
| `IronmanQuestingPlugin.java` | Main plugin controller (startup/shutdown) |
| `IronmanQuestingOverlay.java` | Overlay renderer using JSON steps |
| `IronmanQuestingConfig.java` | Empty config (required by RuneLite) |
| `quest_steps.json` | List of ordered steps (loaded at runtime) |
| `IronmanQuestingPluginTest.java` | Unit test to verify startup logic |

---

## üß™ Testing

This plugin includes working unit tests using **JUnit + Mockito** to ensure safe load behavior.

### ‚úÖ Run tests:
```bash
./gradlew test
```

### ‚úÖ Expected Output:
```
[IronmanQuestingPlugin] üîß Ironman Questing Helper started
‚úÖ Plugin startup completed successfully

BUILD SUCCESSFUL
```

Tests are located at:  
`src/test/java/com/devaz/ironmanquesting/IronmanQuestingPluginTest.java`

---

## ‚öôÔ∏è Integration Notes

- No client state is modified.
- The plugin works even if not logged in.
- JSON loading failure is caught and safely logged (no crash).
- Steps are rendered in a fixed panel at `TOP_LEFT`.

---

## üîÑ Future Plans

- [ ] In-game tracking of step completions
- [ ] Multiple quest path profiles (e.g. HCIM, UIM, Group)
- [ ] Dynamic branching based on account type or quest decisions
- [ ] GitHub-based crowd contribution of step routes

---

## üìå Plugin Manifest

```json
{
  "internalName": "ironmanquesting",
  "displayName": "Ironman Questing Helper",
  "description": "A plugin that helps new Ironman accounts complete quests efficiently",
  "tags": ["ironman", "quest", "helper"],
  "category": "Utility",
  "creator": "Dev_Az",
  "version": "0.1"
}
```

---

## üß† Acknowledgements

Inspired by:  
- [ironman.guide](https://ironman.guide)  
- OSRS community theorycrafters  
- RuneLite Plugin Hub guidelines

---

## üôã Contact

If you have suggestions, feedback, or would like to contribute to quest step data:

üì® **Discord:** `Azerate`  
üêô **GitHub:** [github.com/Az3rate](https://github.com/Az3rate)

---

*Thank you for reviewing! Hope this plugin provides real value to the Ironman community!*


// ===== FILE: .gradle\8.13\gc.properties =====



// ===== FILE: .gradle\buildOutputCleanup\cache.properties =====

#Sun Apr 20 16:56:44 EDT 2025
gradle.version=8.13


// ===== FILE: .gradle\vcs-1\gc.properties =====



// ===== FILE: gradle\wrapper\gradle-wrapper.properties =====

distributionBase=GRADLE_USER_HOME
distributionPath=wrapper/dists
distributionUrl=https\://services.gradle.org/distributions/gradle-8.13-bin.zip
networkTimeout=10000
validateDistributionUrl=true
zipStoreBase=GRADLE_USER_HOME
zipStorePath=wrapper/dists


// ===== FILE: src\main\java\resources\META-INF\plugin.properties =====

pluginClass=com.devaz.ironmanquesting.IronmanQuestingPlugin
